name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: ut-dnr-ugs-backend-tools
  SERVICE_NAME: ugs-ingest-app
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Build project
      run: npm run build

    - name: Verify build output
      run: |
        echo "Checking build output..."
        ls -la dist/
        test -f dist/index.html
        test -f server/index.js
        echo "‚úÖ Build artifacts verified"

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Build and deploy to production
      id: deploy
      run: |
        COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        IMAGE_TAG="prod-${COMMIT_SHA}"
        IMAGE_URL="$REGION-docker.pkg.dev/$PROJECT_ID/containers/$SERVICE_NAME:$IMAGE_TAG"
        
        echo "Building production deployment"
        echo "Commit SHA: $COMMIT_SHA"
        echo "Image URL: $IMAGE_URL"
        
        # Build image with production tag
        set +e
        gcloud builds submit --tag $IMAGE_URL --timeout=20m
        BUILD_EXIT_CODE=$?
        
        if [ $BUILD_EXIT_CODE -ne 0 ]; then
          echo "Build may have failed, checking final status..."
          BUILD_ID=$(gcloud builds list --limit=1 --format="value(id)")
          BUILD_STATUS=$(gcloud builds describe $BUILD_ID --format="value(status)")
          if [ "$BUILD_STATUS" != "SUCCESS" ]; then
            echo "Build failed with status: $BUILD_STATUS"
            exit 1
          fi
        fi
        
        echo "‚úÖ Build completed, deploying to production..."
        
        # Deploy new revision and allocate 100% traffic
        gcloud run deploy $SERVICE_NAME \
          --image $IMAGE_URL \
          --platform managed \
          --region $REGION \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 10 \
          --timeout 300 \
          --set-env-vars NODE_ENV=production \
          --revision-suffix prod-${COMMIT_SHA} \
          --tag latest
        
        # Get the service URL
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)")
        
        echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
        echo "image_url=$IMAGE_URL" >> $GITHUB_OUTPUT
        
        echo "‚úÖ Production deployment successful!"
        echo "Service URL: $SERVICE_URL"

    - name: Test production deployment
      run: |
        SERVICE_URL="${{ steps.deploy.outputs.service_url }}"
        echo "Testing production deployment at: $SERVICE_URL"
        
        # Wait for the service to be ready
        sleep 15
        
        # Test health endpoint
        if curl -f "$SERVICE_URL/health" --max-time 30; then
          echo "‚úÖ Production health check passed"
        else
          echo "‚ùå Production health check failed"
          exit 1
        fi

    - name: Clean up old revisions
      run: |
        echo "Cleaning up old revisions..."
        
        # Keep the latest 5 production revisions, delete older ones
        gcloud run revisions list \
          --service $SERVICE_NAME \
          --region $REGION \
          --filter="metadata.labels.serving-knative-dev/service=$SERVICE_NAME AND metadata.name~prod-" \
          --format="value(metadata.name)" \
          --sort-by="~metadata.creationTimestamp" \
          --limit=100 | tail -n +6 | while read REVISION; do
          if [ -n "$REVISION" ]; then
            echo "Deleting old revision: $REVISION"
            gcloud run revisions delete $REVISION --region $REGION --quiet
          fi
        done
        
        echo "‚úÖ Old revisions cleaned up"

    - name: Deployment summary
      run: |
        echo "üöÄ **Production Deployment Summary**"
        echo "=================================="
        echo "‚úÖ Service: $SERVICE_NAME"
        echo "‚úÖ URL: ${{ steps.deploy.outputs.service_url }}"
        echo "‚úÖ Commit: ${{ steps.deploy.outputs.commit_sha }}"
        echo "‚úÖ Image: ${{ steps.deploy.outputs.image_url }}"
        echo "‚úÖ IAP: Enabled (same configuration as before)"
        echo "‚úÖ Environment: Production"
        echo "=================================="